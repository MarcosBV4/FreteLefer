<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Configurador de Frete Interativo com IA</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Chosen Palette: Warm Neutrals -->
    <!-- Application Structure Plan: The SPA transforms the static questionnaire into an interactive, multi-step wizard. The structure is: Step 1 (Prazos), Step 2 (Condições de Valor), Step 3 (Cálculo de Frete), and a final Summary step. This stepped approach breaks down the complex configuration task into manageable parts, improving usability. The core interaction in Step 3 uses radio buttons to dynamically reveal only the relevant configuration panel, preventing user overload and confusion. This design was chosen to guide the user logically through the setup process, which is more effective than presenting a long, static form. A Gemini API feature was added to auto-generate complex shipping rule descriptions. -->
    <!-- Visualization & Content Choices: The source document is a form, not a data report, so no charts are used. Info: Shipping rules -> Goal: Collect structured input -> Presentation: Interactive form elements. Interaction: Checkboxes toggle associated number inputs; Radio buttons in a group reveal/hide entire configuration sections. A new button calls the Gemini API to generate text for the advanced shipping rules textarea. Justification: This creates a guided, context-sensitive experience, simplifying a complex configuration task and leveraging AI to reduce manual effort. Library/Method: Vanilla JavaScript for DOM manipulation and event handling, including a fetch call to the Gemini API. No chart libraries needed. -->
    <!-- CONFIRMATION: NO SVG graphics used. NO Mermaid JS used. -->
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .step-card {
            background-color: white;
            border-radius: 0.75rem;
            padding: 2rem;
            margin-bottom: 1.5rem;
            box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
            transition: all 0.3s ease-in-out;
        }
        .form-input {
            width: 100%;
            border-radius: 0.5rem;
            border: 1px solid #D1D5DB;
            padding: 0.75rem 1rem;
            transition: border-color 0.2s, box-shadow 0.2s;
        }
        .form-input:focus {
            outline: none;
            border-color: #3B82F6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.3);
        }
        .radio-label {
            display: block;
            padding: 1.5rem;
            border: 2px solid #E5E7EB;
            border-radius: 0.75rem;
            cursor: pointer;
            transition: all 0.2s ease-in-out;
            background-color: #F9FAFB;
        }
        .radio-label:hover {
            border-color: #9CA3AF;
        }
        input[type="radio"]:checked + .radio-label {
            border-color: #3B82F6;
            background-color: #EFF6FF;
            box-shadow: 0 0 0 2px #3B82F6;
        }
        .table-input {
            width: 100%;
            padding: 0.5rem;
            border: 1px solid #D1D5DB;
            border-radius: 0.375rem;
        }
        .btn, .add-row-btn, .delete-row-btn, .save-btn, .gemini-btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 0.5rem 1rem;
            border-radius: 0.5rem;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        .add-row-btn {
            background-color: #10B981;
            color: white;
        }
        .add-row-btn:hover {
            background-color: #059669;
        }
        .delete-row-btn {
            background-color: #EF4444;
            color: white;
            padding: 0.5rem;
        }
        .delete-row-btn:hover {
            background-color: #DC2626;
        }
        .save-btn {
            background-color: #3B82F6;
            color: white;
            font-size: 1.125rem;
            padding: 0.75rem 1.5rem;
        }
        .save-btn:hover {
            background-color: #2563EB;
        }
        .gemini-btn {
            background: linear-gradient(to right, #4f46e5, #818cf8);
            color: white;
        }
        .gemini-btn:hover {
            background: linear-gradient(to right, #4338ca, #6366f1);
        }
        .hidden-section {
            display: none;
            opacity: 0;
            transition: opacity 0.5s ease-in-out;
        }
        .visible-section {
            display: block;
            opacity: 1;
        }
        .loader {
            width: 20px;
            height: 20px;
            border: 3px solid #f3f3f3;
            border-top: 3px solid #3B82F6;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            display: none;
            margin-left: 10px;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        #emailModal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
            display: flex;
            justify-content: center;
            align-items: center;
        }
        #emailModalContent {
            background-color: white;
            padding: 2rem;
            border-radius: 0.75rem;
            width: 90%;
            max-width: 600px;
            max-height: 90vh;
            overflow-y: auto;
        }
    </style>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
</head>
<body class="bg-slate-50 text-gray-800">

    <div class="container mx-auto max-w-4xl p-4 sm:p-6 lg:p-8">

        <header class="text-center mb-10">
            <h1 class="text-4xl font-bold text-gray-900">Configurador de Frete Interativo com IA</h1>
            <p class="mt-2 text-lg text-gray-600">Preencha os campos abaixo para definir suas políticas de entrega de forma precisa.</p>
        </header>

        <form id="shipping-form">
            <!-- Seção 1: Prazos e Condições de Envio -->
            <div class="step-card">
                <h2 class="text-2xl font-semibold mb-6 border-b pb-4 text-gray-700">
                    <span class="text-blue-600 font-bold">Passo 1:</span> Prazos e Condições de Envio
                </h2>
                <div class="space-y-6">
                    <div>
                        <label for="deliveryTime" class="block text-md font-medium text-gray-700 mb-2">Qual é o seu tempo de entrega padrão?</label>
                        <input type="text" id="deliveryTime" class="form-input" placeholder="Ex: 3 a 5 dias úteis após a postagem">
                    </div>
                    <div>
                        <label for="cutoffTime" class="block text-md font-medium text-gray-700 mb-2">Vocês possuem um horário de corte para os envios do dia?</label>
                        <input type="text" id="cutoffTime" class="form-input" placeholder="Ex: Pedidos feitos até as 14:00 são enviados no mesmo dia">
                    </div>
                </div>
            </div>

            <!-- Seção 2: Moeda e Condições de Valor do Pedido -->
            <div class="step-card">
                <h2 class="text-2xl font-semibold mb-6 border-b pb-4 text-gray-700">
                    <span class="text-blue-600 font-bold">Passo 2:</span> Moeda e Condições de Valor
                </h2>
                <div class="space-y-6">
                    <div>
                        <label class="block text-md font-medium text-gray-700 mb-2">Moeda para os custos de frete:</label>
                        <input type="text" class="form-input bg-gray-100" value="BRL (Real Brasileiro)" readonly>
                    </div>
                    <fieldset class="space-y-4">
                        <legend class="text-md font-medium text-gray-700 mb-2">Selecione as condições de valor que se aplicam à sua loja:</legend>
                        <div class="relative flex items-start">
                            <div class="flex h-6 items-center">
                                <input id="freeShippingCondition" name="freeShippingCondition" type="checkbox" class="h-5 w-5 rounded border-gray-300 text-blue-600 focus:ring-blue-600">
                            </div>
                            <div class="ml-3 text-sm leading-6">
                                <label for="freeShippingCondition" class="font-medium text-gray-900">Oferecer frete grátis acima de um valor específico</label>
                                <div id="freeShippingValueContainer" class="mt-2 hidden-section">
                                    <input type="number" id="freeShippingValue" class="form-input" placeholder="Valor mínimo para frete grátis (R$)">
                                </div>
                            </div>
                        </div>
                        <div class="relative flex items-start">
                            <div class="flex h-6 items-center">
                                <input id="minOrderCondition" name="minOrderCondition" type="checkbox" class="h-5 w-5 rounded border-gray-300 text-blue-600 focus:ring-blue-600">
                            </div>
                            <div class="ml-3 text-sm leading-6">
                                <label for="minOrderCondition" class="font-medium text-gray-900">Não realizar envios abaixo de um valor específico</label>
                                <div id="minOrderValueContainer" class="mt-2 hidden-section">
                                    <input type="number" id="minOrderValue" class="form-input" placeholder="Valor mínimo do pedido para envio (R$)">
                                </div>
                            </div>
                        </div>
                    </fieldset>
                </div>
            </div>

            <!-- Seção 3: Como os Custos de Frete São Calculados -->
            <div class="step-card">
                <h2 class="text-2xl font-semibold mb-2 border-b pb-4 text-gray-700">
                    <span class="text-blue-600 font-bold">Passo 3:</span> Como os Custos de Frete São Calculados?
                </h2>
                <p class="mb-6 text-gray-600">Escolha **apenas UMA** das opções abaixo que melhor descreve seu método de cálculo.</p>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <!-- Opções de Rádio -->
                    <div>
                        <input type="radio" name="shippingType" id="typeA" value="A" class="sr-only">
                        <label for="typeA" class="radio-label">
                            <span class="font-bold text-lg block">Opção A: Frete Gratuito</span>
                            <span class="text-gray-600">Todos os pedidos, sem exceção, têm frete grátis.</span>
                        </label>
                    </div>
                    <div>
                        <input type="radio" name="shippingType" id="typeB" value="B" class="sr-only">
                        <label for="typeB" class="radio-label">
                            <span class="font-bold text-lg block">Opção B: Taxa Fixa</span>
                            <span class="text-gray-600">Todos os pedidos, sem exceção, têm o mesmo custo de frete.</span>
                        </label>
                    </div>
                     <div>
                        <input type="radio" name="shippingType" id="typeC" value="C" class="sr-only">
                        <label for="typeC" class="radio-label">
                            <span class="font-bold text-lg block">Opção C: Baseado no Preço</span>
                            <span class="text-gray-600">O valor do frete muda conforme o valor total dos produtos.</span>
                        </label>
                    </div>
                    <div>
                        <input type="radio" name="shippingType" id="typeD" value="D" class="sr-only">
                        <label for="typeD" class="radio-label">
                            <span class="font-bold text-lg block">Opção D: Baseado no Peso</span>
                            <span class="text-gray-600">O valor do frete muda conforme o peso total do pacote.</span>
                        </label>
                    </div>
                    <div>
                        <input type="radio" name="shippingType" id="typeE" value="E" class="sr-only">
                        <label for="typeE" class="radio-label">
                            <span class="font-bold text-lg block">Opção E: Baseado no Destino</span>
                            <span class="text-gray-600">O valor do frete muda conforme a localização do cliente.</span>
                        </label>
                    </div>
                    <div>
                        <input type="radio" name="shippingType" id="typeF" value="F" class="sr-only">
                        <label for="typeF" class="radio-label">
                            <span class="font-bold text-lg block">Opção F: Baseado no Nº de Itens</span>
                            <span class="text-gray-600">O valor do frete muda conforme a quantidade de produtos.</span>
                        </label>
                    </div>
                     <div class="md:col-span-2">
                        <input type="radio" name="shippingType" id="typeG" value="G" class="sr-only">
                        <label for="typeG" class="radio-label">
                            <span class="font-bold text-lg block">Opção G: Tabela de Custos Avançada</span>
                            <span class="text-gray-600">O frete depende de uma combinação de fatores (ex: peso + destino).</span>
                        </label>
                    </div>
                </div>

                <!-- Detalhes das opções -->
                <div id="shippingTypeDetails" class="mt-6 space-y-4">
                    <div id="detailsB" class="hidden-section p-4 border border-gray-200 rounded-lg bg-white">
                        <label for="fixedRate" class="block text-md font-medium text-gray-700 mb-2">Qual o valor da taxa fixa?</label>
                        <input type="number" id="fixedRate" class="form-input" placeholder="Insira o valor em R$">
                    </div>

                    <div id="detailsC" class="hidden-section p-4 border border-gray-200 rounded-lg bg-white">
                        <h4 class="font-medium text-gray-700 mb-2">Configure as faixas de preço:</h4>
                        <table class="w-full text-sm text-left text-gray-500">
                            <thead class="text-xs text-gray-700 uppercase bg-gray-50">
                                <tr>
                                    <th scope="col" class="px-4 py-2">De (R$)</th>
                                    <th scope="col" class="px-4 py-2">Até (R$)</th>
                                    <th scope="col" class="px-4 py-2">Custo do Frete (R$)</th>
                                    <th scope="col" class="px-4 py-2"></th>
                                </tr>
                            </thead>
                            <tbody id="priceTableBody">
                                <tr>
                                    <td class="p-1"><input type="number" value="0.01" class="table-input" readonly></td>
                                    <td class="p-1"><input type="number" placeholder="Ex: 50.00" class="table-input"></td>
                                    <td class="p-1"><input type="number" placeholder="Ex: 10.00" class="table-input"></td>
                                    <td class="p-1"></td>
                                </tr>
                            </tbody>
                        </table>
                        <button type="button" onclick="addRow('priceTableBody', 3)" class="add-row-btn mt-2"><span>&#43;</span> Adicionar Linha</button>
                    </div>
                    
                    <div id="detailsD" class="hidden-section p-4 border border-gray-200 rounded-lg bg-white">
                        <h4 class="font-medium text-gray-700 mb-2">Configure as faixas de peso:</h4>
                        <table class="w-full text-sm text-left text-gray-500">
                             <thead class="text-xs text-gray-700 uppercase bg-gray-50">
                                <tr>
                                    <th scope="col" class="px-4 py-2">De (kg)</th>
                                    <th scope="col" class="px-4 py-2">Até (kg)</th>
                                    <th scope="col" class="px-4 py-2">Custo do Frete (R$)</th>
                                    <th scope="col" class="px-4 py-2"></th>
                                </tr>
                            </thead>
                            <tbody id="weightTableBody">
                                <tr>
                                    <td class="p-1"><input type="number" value="0.01" class="table-input" readonly></td>
                                    <td class="p-1"><input type="number" placeholder="Ex: 1.0" class="table-input"></td>
                                    <td class="p-1"><input type="number" placeholder="Ex: 15.00" class="table-input"></td>
                                    <td class="p-1"></td>
                                </tr>
                            </tbody>
                        </table>
                        <button type="button" onclick="addRow('weightTableBody', 3)" class="add-row-btn mt-2"><span>&#43;</span> Adicionar Linha</button>
                    </div>

                    <div id="detailsE" class="hidden-section p-4 border border-gray-200 rounded-lg bg-white">
                        <h4 class="font-medium text-gray-700 mb-2">Configure os custos por destino:</h4>
                         <table class="w-full text-sm text-left text-gray-500">
                             <thead class="text-xs text-gray-700 uppercase bg-gray-50">
                                <tr>
                                    <th scope="col" class="px-4 py-2">Destino (Região, Estado, Faixa de CEP)</th>
                                    <th scope="col" class="px-4 py-2">Custo do Frete (R$)</th>
                                    <th scope="col" class="px-4 py-2"></th>
                                </tr>
                            </thead>
                            <tbody id="destinationTableBody">
                                <tr>
                                    <td class="p-1"><input type="text" placeholder="Ex: SP - Capital" class="table-input"></td>
                                    <td class="p-1"><input type="number" placeholder="Ex: 20.00" class="table-input"></td>
                                    <td class="p-1"></td>
                                </tr>
                            </tbody>
                        </table>
                        <button type="button" onclick="addRow('destinationTableBody', 2)" class="add-row-btn mt-2"><span>&#43;</span> Adicionar Linha</button>
                    </div>

                    <div id="detailsF" class="hidden-section p-4 border border-gray-200 rounded-lg bg-white">
                        <h4 class="font-medium text-gray-700 mb-2">Configure por número de itens:</h4>
                         <table class="w-full text-sm text-left text-gray-500">
                           <thead class="text-xs text-gray-700 uppercase bg-gray-50">
                                <tr>
                                    <th scope="col" class="px-4 py-2">De (Nº Itens)</th>
                                    <th scope="col" class="px-4 py-2">Até (Nº Itens)</th>
                                    <th scope="col" class="px-4 py-2">Custo do Frete (R$)</th>
                                    <th scope="col" class="px-4 py-2"></th>
                                </tr>
                            </thead>
                            <tbody id="itemsTableBody">
                                <tr>
                                    <td class="p-1"><input type="number" value="1" class="table-input" readonly></td>
                                    <td class="p-1"><input type="number" placeholder="Ex: 3" class="table-input"></td>
                                    <td class="p-1"><input type="number" placeholder="Ex: 25.00" class="table-input"></td>
                                    <td class="p-1"></td>
                                </tr>
                            </tbody>
                        </table>
                        <button type="button" onclick="addRow('itemsTableBody', 3)" class="add-row-btn mt-2"><span>&#43;</span> Adicionar Linha</button>
                    </div>

                    <div id="detailsG" class="hidden-section p-4 border border-gray-200 rounded-lg bg-white">
                        <label for="advancedDetails" class="block text-md font-medium text-gray-700 mb-2">Descreva a regra de frete avançada em detalhes:</label>
                        <textarea id="advancedDetails" rows="4" class="form-input" placeholder="Ex: O frete é calculado com base no peso para a Região Sul e no preço para as demais regiões..."></textarea>
                        <div class="mt-3 flex items-center">
                           <button type="button" id="geminiSuggestionBtn" class="gemini-btn">✨ Gerar Sugestão com IA</button>
                           <div id="geminiLoader" class="loader"></div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="mt-8 text-center">
                <button type="button" id="saveButton" class="save-btn">Revisar e Salvar Configurações</button>
            </div>
        </form>
        
        <!-- Seção de Resumo -->
        <div id="summarySection" class="step-card mt-10 hidden-section">
            <h2 class="text-2xl font-semibold mb-6 border-b pb-4 text-gray-700">Resumo das Configurações</h2>
            <div id="summaryContent" class="space-y-4 text-gray-800"></div>
             <div class="mt-6 text-center">
                <button type="button" id="generateEmailBtn" class="gemini-btn">✨ Gerar E-mail para Clientes com IA</button>
                <div id="emailLoader" class="loader inline-block"></div>
            </div>
        </div>

    </div>
    
    <!-- Modal para E-mail -->
    <div id="emailModal" class="hidden-section">
        <div id="emailModalContent">
            <h3 class="text-xl font-semibold mb-4">Sugestão de E-mail</h3>
            <div id="emailBody" class="p-4 bg-gray-50 rounded-lg border whitespace-pre-wrap"></div>
            <div class="mt-6 text-right">
                <button type="button" id="closeModalBtn" class="btn bg-gray-500 text-white hover:bg-gray-600">Fechar</button>
            </div>
        </div>
    </div>


    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const form = document.getElementById('shipping-form');

            const freeShippingCheckbox = document.getElementById('freeShippingCondition');
            const freeShippingContainer = document.getElementById('freeShippingValueContainer');
            
            const minOrderCheckbox = document.getElementById('minOrderCondition');
            const minOrderContainer = document.getElementById('minOrderValueContainer');

            freeShippingCheckbox.addEventListener('change', () => {
                freeShippingContainer.classList.toggle('hidden-section', !freeShippingCheckbox.checked);
                freeShippingContainer.classList.toggle('visible-section', freeShippingCheckbox.checked);
            });

            minOrderCheckbox.addEventListener('change', () => {
                minOrderContainer.classList.toggle('hidden-section', !minOrderCheckbox.checked);
                minOrderContainer.classList.toggle('visible-section', minOrderCheckbox.checked);
            });

            const shippingTypeRadios = document.querySelectorAll('input[name="shippingType"]');
            shippingTypeRadios.forEach(radio => {
                radio.addEventListener('change', (event) => {
                    const selectedValue = event.target.value;
                    const allDetails = document.querySelectorAll('#shippingTypeDetails > div');
                    allDetails.forEach(div => {
                        div.classList.remove('visible-section');
                        div.classList.add('hidden-section');
                    });

                    if (selectedValue && selectedValue !== 'A') {
                        const targetDiv = document.getElementById(`details${selectedValue}`);
                        if (targetDiv) {
                            targetDiv.classList.remove('hidden-section');
                            targetDiv.classList.add('visible-section');
                        }
                    }
                });
            });

            const saveButton = document.getElementById('saveButton');
            saveButton.addEventListener('click', generateSummary);
            
            const geminiSuggestionBtn = document.getElementById('geminiSuggestionBtn');
            geminiSuggestionBtn.addEventListener('click', getSmartSuggestion);

            const generateEmailBtn = document.getElementById('generateEmailBtn');
            generateEmailBtn.addEventListener('click', generateCustomerEmail);

            const closeModalBtn = document.getElementById('closeModalBtn');
            closeModalBtn.addEventListener('click', () => {
                document.getElementById('emailModal').classList.add('hidden-section');
            });
        });

        async function getSmartSuggestion() {
            const loader = document.getElementById('geminiLoader');
            const textarea = document.getElementById('advancedDetails');
            loader.style.display = 'inline-block';
            textarea.value = 'Gerando sugestão...';

            const deliveryTime = document.getElementById('deliveryTime').value;
            const cutoffTime = document.getElementById('cutoffTime').value;
            const freeShipping = document.getElementById('freeShippingCondition').checked;
            const freeShippingValue = document.getElementById('freeShippingValue').value;
            const minOrder = document.getElementById('minOrderCondition').checked;
            const minOrderValue = document.getElementById('minOrderValue').value;

            let context = `Tempo de entrega padrão: ${deliveryTime || 'não informado'}. `;
            context += `Horário de corte para envio no mesmo dia: ${cutoffTime || 'não informado'}. `;
            if (freeShipping) {
                context += `Oferece frete grátis para pedidos acima de R$${freeShippingValue}. `;
            }
            if (minOrder) {
                context += `O valor mínimo do pedido para envio é R$${minOrderValue}. `;
            }

            const prompt = `Aja como um especialista em logística e e-commerce. Com base nas seguintes informações, escreva uma política de frete clara e concisa para a seção "Tabela de Custos Avançada" de um site. A política deve ser fácil para os clientes entenderem. Informações: ${context}`;
            
            try {
                let chatHistory = [];
                chatHistory.push({ role: "user", parts: [{ text: prompt }] });
                const payload = { contents: chatHistory };
                const apiKey = "";
                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
                
                const result = await response.json();
                
                if (result.candidates && result.candidates.length > 0 &&
                    result.candidates[0].content && result.candidates[0].content.parts &&
                    result.candidates[0].content.parts.length > 0) {
                    const text = result.candidates[0].content.parts[0].text;
                    textarea.value = text;
                } else {
                    textarea.value = 'Não foi possível gerar uma sugestão. Por favor, tente novamente.';
                }
            } catch (error) {
                console.error("Error calling Gemini API:", error);
                textarea.value = 'Erro ao contatar a IA. Verifique sua conexão e tente novamente.';
            } finally {
                loader.style.display = 'none';
            }
        }
        
        async function generateCustomerEmail() {
            const loader = document.getElementById('emailLoader');
            loader.style.display = 'inline-block';

            const summaryHtml = document.getElementById('summaryContent').innerText;
            if (!summaryHtml) {
                alert("Por favor, gere o resumo primeiro.");
                loader.style.display = 'none';
                return;
            }

            const prompt = `Aja como um gerente de marketing. Com base no seguinte resumo da nova política de frete de uma loja, escreva um e-mail amigável e informativo para os clientes, anunciando as novidades. Use um tom positivo e destaque os benefícios. Resumo da política: "${summaryHtml}"`;

            try {
                let chatHistory = [];
                chatHistory.push({ role: "user", parts: [{ text: prompt }] });
                const payload = { contents: chatHistory };
                const apiKey = "";
                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
                
                const result = await response.json();
                
                if (result.candidates && result.candidates.length > 0 &&
                    result.candidates[0].content && result.candidates[0].content.parts &&
                    result.candidates[0].content.parts.length > 0) {
                    const text = result.candidates[0].content.parts[0].text;
                    document.getElementById('emailBody').innerText = text;
                    document.getElementById('emailModal').classList.remove('hidden-section');
                } else {
                    alert('Não foi possível gerar o e-mail. Tente novamente.');
                }
            } catch (error) {
                console.error("Error calling Gemini API:", error);
                alert('Erro ao contatar a IA. Verifique sua conexão e tente novamente.');
            } finally {
                loader.style.display = 'none';
            }
        }


        function addRow(tableBodyId, numCols) {
            const tableBody = document.getElementById(tableBodyId);
            const newRow = tableBody.insertRow();
            const lastRow = tableBody.rows[tableBody.rows.length - 2];
            let lastValue = 0;
            if (lastRow) {
                const lastInput = lastRow.cells[1].querySelector('input');
                if (lastInput && lastInput.value) {
                    lastValue = parseFloat(lastInput.value);
                }
            }
            
            const firstCellInput = `<input type="number" value="${lastValue ? (lastValue + 0.01).toFixed(2) : ''}" class="table-input" ${tableBodyId !== 'destinationTableBody' ? 'readonly' : ''}>`;
            const firstCellType = tableBodyId === 'destinationTableBody' ? 'text' : 'number';

            const cells = [
                `<input type="${firstCellType}" value="${lastValue ? (lastValue + 0.01).toFixed(2) : ''}" class="table-input" placeholder="Ex: 50.01">`,
                `<input type="number" class="table-input" placeholder="Ex: 100.00">`,
                `<input type="number" class="table-input" placeholder="Ex: 15.00">`,
            ];

            if (tableBodyId === 'destinationTableBody') {
                 newRow.innerHTML = `
                    <td class="p-1"><input type="text" placeholder="Ex: Região Norte" class="table-input"></td>
                    <td class="p-1"><input type="number" placeholder="Ex: 30.00" class="table-input"></td>
                    <td class="p-1"><button type="button" class="delete-row-btn" onclick="deleteRow(this)"><span>&#10005;</span></button></td>`;
            } else {
                 newRow.innerHTML = `
                    <td class="p-1"><input type="number" value="${lastValue ? (lastValue + 0.01).toFixed(2) : ''}" class="table-input" readonly></td>
                    <td class="p-1"><input type="number" placeholder="Ex: 100.00" class="table-input"></td>
                    <td class="p-1"><input type="number" placeholder="Ex: 15.00" class="table-input"></td>
                    <td class="p-1"><button type="button" class="delete-row-btn" onclick="deleteRow(this)"><span>&#10005;</span></button></td>`;
            }
        }

        function deleteRow(button) {
            const row = button.parentNode.parentNode;
            row.parentNode.removeChild(row);
        }

        function generateSummary() {
            const summarySection = document.getElementById('summarySection');
            const summaryContent = document.getElementById('summaryContent');
            let html = '';

            const deliveryTime = document.getElementById('deliveryTime').value;
            const cutoffTime = document.getElementById('cutoffTime').value;

            html += `<p><strong>Tempo de Entrega Padrão:</strong> ${deliveryTime || 'Não informado'}</p>`;
            html += `<p><strong>Horário de Corte:</strong> ${cutoffTime || 'Não informado'}</p>`;
            
            html += '<hr class="my-3">';

            const freeShipping = document.getElementById('freeShippingCondition').checked;
            if (freeShipping) {
                const value = document.getElementById('freeShippingValue').value;
                html += `<p><strong>Condição:</strong> Frete grátis para pedidos acima de R$ ${value || '0.00'}</p>`;
            }
            
            const minOrder = document.getElementById('minOrderCondition').checked;
            if (minOrder) {
                const value = document.getElementById('minOrderValue').value;
                html += `<p><strong>Condição:</strong> Valor mínimo do pedido para envio é R$ ${value || '0.00'}</p>`;
            }

            if (!freeShipping && !minOrder) {
                 html += '<p><strong>Condições de Valor:</strong> Nenhuma condição especial de valor foi definida.</p>';
            }

            html += '<hr class="my-3">';

            const selectedType = document.querySelector('input[name="shippingType"]:checked');
            if (selectedType) {
                const typeValue = selectedType.value;
                switch(typeValue) {
                    case 'A':
                        html += '<p><strong>Método de Cálculo:</strong> Frete Gratuito para todos os pedidos.</p>';
                        break;
                    case 'B':
                        const rate = document.getElementById('fixedRate').value;
                        html += `<p><strong>Método de Cálculo:</strong> Taxa Fixa de R$ ${rate || '0.00'}.</p>`;
                        break;
                    case 'C':
                        html += '<p><strong>Método de Cálculo:</strong> Baseado no Preço do Pedido</p>';
                        html += getTableSummary('priceTableBody', ['De (R$)', 'Até (R$)', 'Frete (R$)']);
                        break;
                    case 'D':
                        html += '<p><strong>Método de Cálculo:</strong> Baseado no Peso do Pacote</p>';
                        html += getTableSummary('weightTableBody', ['De (kg)', 'Até (kg)', 'Frete (R$)']);
                        break;
                    case 'E':
                        html += '<p><strong>Método de Cálculo:</strong> Baseado no Destino</p>';
                        html += getTableSummary('destinationTableBody', ['Destino', 'Frete (R$)']);
                        break;
                    case 'F':
                        html += '<p><strong>Método de Cálculo:</strong> Baseado no Número de Itens</p>';
                        html += getTableSummary('itemsTableBody', ['De (Itens)', 'Até (Itens)', 'Frete (R$)']);
                        break;
                    case 'G':
                         const details = document.getElementById('advancedDetails').value;
                         html += '<p><strong>Método de Cálculo:</strong> Tabela de Custos Avançada</p>';
                         html += `<div class="p-3 bg-gray-100 rounded-md whitespace-pre-wrap">${details || 'Nenhuma regra descrita.'}</div>`;
                         break;
                }
            } else {
                 html += '<p><strong>Método de Cálculo:</strong> Nenhum método foi selecionado.</p>';
            }

            summaryContent.innerHTML = html;
            summarySection.classList.remove('hidden-section');
            summarySection.classList.add('visible-section');
            summarySection.scrollIntoView({ behavior: 'smooth' });
        }

        function getTableSummary(tableBodyId, headers) {
            const tableBody = document.getElementById(tableBodyId);
            let tableHtml = '<table class="w-full text-sm mt-2"><thead><tr class="bg-gray-100">';
            headers.forEach(h => tableHtml += `<th class="p-2 text-left">${h}</th>`);
            tableHtml += '</tr></thead><tbody>';
            
            for (const row of tableBody.rows) {
                tableHtml += '<tr class="border-b">';
                for (const cell of row.cells) {
                    const input = cell.querySelector('input, textarea');
                    if (input) {
                        tableHtml += `<td class="p-2">${input.value || '-'}</td>`;
                    }
                }
                tableHtml += '</tr>';
            }

            tableHtml += '</tbody></table>';
            return tableHtml;
        }

    </script>

</body>
</html>
